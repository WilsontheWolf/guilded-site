{"version":3,"sources":["Header.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Left","className","href","Header","location","window","Content","props","arguments","state","value","this","update","addEventListener","bind","setState","fetch","getPage","data","ok","status","statusText","text","navigator","onLine","document","querySelectorAll","forEach","block","hljs","highlightBlock","markdown","options","ghCodeBlocks","React","Component","hash","substr","url","App","id","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"uRAAA,SAASA,IACL,OACI,qBAAKC,UAAU,OAAf,SACI,mBAAGC,KAA+B,IAAKD,UAAU,SAAjD,SACI,qDAaDE,MAPf,WACI,OACI,qBAAKF,UAAU,SAAf,SACI,cAACD,EAAD,OCPJI,EAAaC,OAAbD,S,IAaFE,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,eAASC,YACJD,MAAQA,EACb,EAAKE,MAAQ,CACTC,MAAO,cAJI,E,0KAUfC,KAAKC,SACLP,OAAOQ,iBAAiB,aAAcF,KAAKC,OAAOE,KAAKH,O,8PAIvDA,KAAKI,SAAS,CACVL,MAAO,e,kBAIUM,MAAMC,K,WAAnBC,E,QACMC,G,gBAAIT,EAAK,8BAA0BQ,EAAKE,OAA/B,YAAyCF,EAAKG,Y,wCAC9CH,EAAKI,O,QAAnBZ,E,iEAIDA,EADAa,UAAUC,OACL,oCAEG,wF,QAEhBb,KAAKI,SAAS,CACVL,U,2JAIJe,SAASC,iBAAiB,YAAYC,SAAQ,SAAAC,GAC1CC,IAAKC,eAAeF,Q,+BAMxB,OACI,cAAC,IAAD,CACIG,SAAUpB,KAAKF,MAAMC,MAAOsB,QAAS,CAAEC,cAAc,S,GA7C/CC,IAAMC,WAkD5B,SAASlB,IACL,IAAImB,EAAOhC,EAASgC,KAAKC,OAAO,GAC5BC,EAAMF,EAAOA,EAAO,MAAV,WAEd,OADAE,EAA+B,IAAMA,EAI1BC,MApEf,WACI,OACI,sBAAKtC,UAAU,MAAf,UACI,cAAC,EAAD,IACA,qBAAKuC,GAAG,UAAR,SACI,cAAC,EAAD,UCDVC,EAAcC,QACW,cAA7BrC,OAAOD,SAASuC,UAEe,UAA7BtC,OAAOD,SAASuC,UAEhBtC,OAAOD,SAASuC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BxB,UAAUyB,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfc,UAAUyB,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCxFjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SDUnB,SAAkBnB,GACvB,GAA6C,kBAAmBxB,UAAW,CAGzE,GADkB,IAAI4C,IAAIC,GAAwB/D,OAAOD,SAASF,MACpDmE,SAAWhE,OAAOD,SAASiE,OAIvC,OAGFhE,OAAOQ,iBAAiB,QAAQ,WAC9B,IAAMiC,EAAK,UAAMsB,GAAN,sBAEP3B,IAgEV,SAAiCK,EAAOC,GAEtC/B,MAAM8B,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAACqB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASnD,QACO,MAAfoD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CnD,UAAUyB,cAAc2B,MAAMzB,MAAK,SAACC,GAClCA,EAAayB,aAAa1B,MAAK,WAC7B7C,OAAOD,SAASyE,eAKpBhC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IAAI,oEAtFVoB,CAAwBhC,EAAOC,GAI/BxB,UAAUyB,cAAc2B,MAAMzB,MAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,OChC/BgC,I","file":"static/js/main.7efb9d8e.chunk.js","sourcesContent":["function Left() {\n    return (\n        <div className=\"logo\">\n            <a href={process.env.PUBLIC_URL + '#'} className=\"noLink\">\n                <button>GuildScript</button>\n            </a>\n        </div>\n    )\n}\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <Left />\n        </div>\n    )\n}\nexport default Header","import './App.css';\nimport React from 'react';\nimport MD from 'react-showdown';\nimport hljs from \"highlight.js\";\nimport 'highlight.js/styles/solarized-dark.css';\nimport Header from './Header'\nconst { location } = window;\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <div id=\"content\">\n                <Content />\n            </div>\n        </div>\n    );\n}\n\nclass Content extends React.Component {\n    constructor(props) {\n        super(...arguments)\n        this.props = props\n        this.state = {\n            value: 'Loading...'\n        };\n\n    }\n\n    async componentDidMount() {\n        this.update();\n        window.addEventListener('hashchange', this.update.bind(this));\n    }\n\n    async update() {\n        this.setState({\n            value: 'Loading...'\n        })\n        let value\n        try {\n            let data = await fetch(getPage());\n            if (!data.ok) value = `Error loading page! ${data.status} ${data.statusText}`\n            else value = await data.text();\n        }\n        catch (e) {\n            if (navigator.onLine)\n                value = `Error loading page! ${e}`\n            else\n                value = 'This page does not appear to be cached! Please connect to the internet and try again.'\n        }\n        this.setState({\n            value\n        })\n    }\n    componentDidUpdate() {\n        document.querySelectorAll(\"pre code\").forEach(block => {\n            hljs.highlightBlock(block);\n        });\n\n    }\n\n    render() {\n        return (\n            <MD\n                markdown={this.state.value} options={{ ghCodeBlocks: true }} />\n        )\n    }\n}\n\nfunction getPage() {\n    let hash = location.hash.substr(1)\n    let url = hash ? hash + '.md' : `index.md`\n    url = process.env.PUBLIC_URL + '/' + url;\n    return url;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}